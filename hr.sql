-- 1. 사원번호가 176인 사원의 LAST_NAME, 부서번호 정보 조회
SELECT LAST_NAME, DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 176;
-- 2. 급여가 12000 이상 되는 직원들의 LAST_NAME, 급여 조회
SELECT LAST_NAME, SALARY FROM EMPLOYEES WHERE SALARY >= 12000;
-- 3. 급여 5000~12000 범위가 아닌 사람들의 LAST_NAME, 급여 조회
SELECT LAST_NAME, SALARY FROM EMPLOYEES WHERE SALARY < 5000 OR SALARY > 12000;
-- 4. 20, 50번 부서에 근무하는 사원들의 LAST_NAME, 부서번호를 오름차순으로 조회
SELECT LAST_NAME, DEPARTMENT_ID FROM EMPLOYEES WHERE DEPARTMENT_ID IN (20, 50) ORDER BY DEPARTMENT_ID, LAST_NAME;
-- 5. 커미션을 받는 모든 사원들의 LAST_NAME, 급여, 커미션 조회. 급여 내림차순, 커미션 내림차순 조회
SELECT
	LAST_NAME,
	SALARY,
	COMMISSION_PCT
FROM
	EMPLOYEES
WHERE
	COMMISSION_PCT IS NOT NULL
ORDER BY
	SALARY DESC,
	COMMISSION_PCT DESC;
SELECT
	LAST_NAME,
	SALARY,
	COMMISSION_PCT
FROM
	EMPLOYEES
WHERE
	COMMISSION_PCT > 0
ORDER BY
	SALARY DESC,
	COMMISSION_PCT DESC;
-- 6. 연봉이 2500, 3500, 7500이 아니며 직무가 SA_REP, ST_CLERK인 사원 조회
SELECT
	*
FROM
	EMPLOYEES
WHERE
	SALARY NOT IN (2500, 3500, 7500)
	AND JOB_ID IN ('SA_REP', 'ST_CLERK');
-- 7. 2015/02/20 ~ 05/01 사이에 고용된 사원들의 LAST_NAME, 사번, 고용일자 조회. 고용일자 내림차순
SELECT
	LAST_NAME,
	EMPLOYEE_ID,
	HIRE_DATE
FROM
	EMPLOYEES
WHERE
	HIRE_DATE >= '2015-02-20'
	AND HIRE_DATE <= '2015-05-01'
ORDER BY
	HIRE_DATE DESC;
-- 8. 20, 50번 부서에 근무하는 사원들 중에서 연봉이 5000 이상 12000 이하인 사원들의 LAST_NAME, 급여 조회. 급여 오름차순
SELECT
	LAST_NAME,
	SALARY
FROM
	EMPLOYEES
WHERE
	DEPARTMENT_ID IN (20, 50)
	AND SALARY BETWEEN 5000 AND 12000
ORDER BY
	SALARY; 
-- 9. 연봉이 5000 이상 12000 이하가 아닌 사원들의 LAST_NAME, 급여 조회. 급여 오름차순
SELECT
	LAST_NAME,
	SALARY
FROM
	EMPLOYEES
WHERE
	DEPARTMENT_ID IN (20, 50)
	AND SALARY NOT BETWEEN 5000 AND 12000
ORDER BY
	SALARY; 
-- 10. 2015/02/20 ~ 05/01 사이에 고용된 사원들의 LAST_NAME, 사번, 고용일자 조회. 고용일자 내림차순
SELECT
	LAST_NAME,
	EMPLOYEE_ID,
	HIRE_DATE
FROM
	EMPLOYEES
WHERE
	HIRE_DATE BETWEEN '2015/02/20' AND '2015/05/01'
ORDER BY
	HIRE_DATE DESC; 
-- 11. LAST_NAME에 u가 포함되는 사원들의 사번, LAST_NAME 조회
SELECT
	EMPLOYEE_ID,
	LAST_NAME
FROM
	EMPLOYEES
WHERE
	LAST_NAME LIKE '%u%';
-- 12. LAST_NAME에 4번째 글자가 a인 사원들의 LAST_NAME 조회
SELECT
	LAST_NAME
FROM
	EMPLOYEES
WHERE
	LAST_NAME LIKE '___a%';
-- 13. LAST_NAME에 a 혹은 e글자가 있는 사원들의 LAST_NAME 조회(라네 오름차순)
SELECT
	LAST_NAME
FROM
	EMPLOYEES
WHERE
	LAST_NAME LIKE '%a%'
	OR LAST_NAME LIKE '%e%'
ORDER BY
	LAST_NAME;
-- 14. LAST_NAME에 a와 e글자가 포함된 사원들의 LAST_NAME을 조회(오름차순)
SELECT
	LAST_NAME
FROM
	EMPLOYEES
WHERE
	LAST_NAME LIKE '%a%'
	AND LAST_NAME LIKE '%e%'
ORDER BY
	LAST_NAME;
-- 15. 매니저 아이디가 없는 사원들의 LAST_NAME, JOB_ID 조회
SELECT
	LAST_NAME,
	JOB_ID
FROM
	EMPLOYEES
WHERE
	MANAGER_ID IS NULL;
-- 16. 직무가 ST_CLERK인 사원이 근무하고 있지 않은 부서 ID 조회(단, 부서번호가 NULL은 제외)
SELECT
	DEPARTMENT_ID
FROM
	EMPLOYEES
WHERE
	JOB_ID != 'ST_CLERK' AND DEPARTMENT_ID IS NOT NULL;
-- 17. COMMISSION_PCT가 NULL이 아닌 사원들 중에서 COMMISSION = SALARY * COMMISSION_PCT를 구하여 사번, FIRST_NAME_ JOB_ID 조회
SELECT
	SALARY * COMMISSION_PCT AS COMMISSION,
	EMPLOYEE_ID,
	FIRST_NAME,
	JOB_ID
FROM
	EMPLOYEES
WHERE
	COMMISSION_PCT IS NOT NULL;

-- 함수
-- 18. FIRST_NAME이 Curtis인 사람의 first_name, last_name, email, phone_number, job_id 조회
-- 단, job_id 결과는 소문자로 출력
SELECT FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, LOWER(JOB_ID)
FROM EMPLOYEES
WHERE FIRST_NAME = 'Curtis';
-- 19. 부서번호가 60,70,80,90인 사원들의 사원번호, first_name, hire_date, job_id 조회
-- 단, job_id가 IT_PORG인 사원의 경우 프로그래머로 변경하여 출력
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, REPLACE(JOB_ID, 'IT_PROG', 'PROGRAMMER')
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (60,70,80,90);
-- 20. job_id가 AD_PRES, PU_CLERK인 사원들의 사원번호, first_name, last_name, 부서번호, job_id 조회
-- 단, 사원명은 FIRST_NAME과 LAST_NAME을 연결하여 출력하시오
SELECT EMPLOYEE_ID, CONCAT(FIRST_NAME, CONCAT(' ', LAST_NAME)) AS NAME, DEPARTMENT_ID, JOB_ID
FROM EMPLOYEES
WHERE JOB_ID IN ('AD_PRES','PU_CLERK');

SELECT EMPLOYEE_ID, (FIRST_NAME || ' ' || LAST_NAME) AS NAME, DEPARTMENT_ID, JOB_ID
FROM EMPLOYEES
WHERE JOB_ID IN ('AD_PRES','PU_CLERK');

-- 다중행함수
-- 21. 회사 내의 최대연봉 및 최소연봉의 차이를 조회 (sal_gap)
SELECT MAX(SALARY) - MIN(SALARY) AS sal_gap
FROM EMPLOYEES;
-- 22. 매니저로 근무하는 사원들의 총 숫자 조회
SELECT COUNT(DISTINCT MANAGER_ID) AS "매니저 수"
FROM EMPLOYEES;
-- 23. 매니저가 없는 사원들은 제외하고 매니저가 관리하는 사원들 중에서 최소 급여를 받는 사원 조회
-- 단, 매니저가 관리하는 사원 중에서 연봉이 6000 미만인 사원 제외
-- 매니저ID 최소급여
SELECT
	MANAGER_ID,
	MIN(SALARY)
FROM
	EMPLOYEES
WHERE
	MANAGER_ID IS NOT NULL
GROUP BY
	MANAGER_ID
HAVING
	NOT MIN(SALARY) < 6000
ORDER BY
	MANAGER_ID;

SELECT
    E.MANAGER_ID,
    E.FIRST_NAME || ' ' || E.LAST_NAME AS MIN_PAID_EMPLOYEE_NAME,
    M.MIN_SALARY
FROM
    EMPLOYEES E
JOIN (
    -- 인라인 뷰: 매니저별 최소 급여 계산
    SELECT
        MANAGER_ID,
        MIN(SALARY) AS MIN_SALARY
    FROM
        EMPLOYEES
    WHERE
        MANAGER_ID IS NOT NULL
    GROUP BY
        MANAGER_ID
    -- 6000 미만 최소 급여를 가진 매니저 그룹 제외
    HAVING
        MIN(SALARY) >= 6000
) M ON E.MANAGER_ID = M.MANAGER_ID AND E.SALARY = M.MIN_SALARY
ORDER BY
    E.MANAGER_ID;

-- join
-- 24. 자신의 담당 매니저의 고용일보다 빠른 입사자 찾기
SELECT
	e1.EMPLOYEE_ID,
	e1.MANAGER_ID,
	e1.HIRE_DATE,
	e2.HIRE_DATE AS MANAGER_HIRE_DATE
FROM
	EMPLOYEES e1
JOIN EMPLOYEES e2 ON
	e1.MANAGER_ID = e2.EMPLOYEE_ID
	AND e1.MANAGER_ID IS NOT NULL
WHERE
	e1.HIRE_DATE < e2.HIRE_DATE
ORDER BY
	e1.EMPLOYEE_ID;
-- 25. 도시 이름이 T로 시작하는 지역에 사는 사원들의 사번, last_naem, 부서번호 조회
SELECT
	e.EMPLOYEE_ID,
	e.LAST_NAME ,
	e.DEPARTMENT_ID,
	l.CITY
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	e.DEPARTMENT_ID = d.DEPARTMENT_ID
JOIN LOCATIONS l ON
	d.LOCATION_ID = l.LOCATION_ID
WHERE
	l.CITY LIKE 'T%'
ORDER BY
	e.EMPLOYEE_ID;
-- 26. 위치 ID가 1700인 사원들의 사번, last_name, 부서번호, 연봉 조회
SELECT
	e.EMPLOYEE_ID,
	e.LAST_NAME ,
	e.DEPARTMENT_ID,
	e.SALARY
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	e.DEPARTMENT_ID = d.DEPARTMENT_ID
WHERE
	d.LOCATION_ID = 1700
ORDER BY
	e.EMPLOYEE_ID;
-- 27. 부서명, 위치ID, 각 부서별 사원총수, 부서별 평균 연봉 조회, 평균 연봉은 소수점 2자리까지만
SELECT
	d.DEPARTMENT_NAME,
	d.LOCATION_ID,
	COUNT(d.DEPARTMENT_NAME) AS CNT,
	TRUNC(AVG(e.SALARY), 2) AS AVG_SAL
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	e.DEPARTMENT_ID = d.DEPARTMENT_ID
GROUP BY
	d.DEPARTMENT_NAME, d.LOCATION_ID
ORDER BY
	d.DEPARTMENT_NAME;
-- 28. Executive 부서에 근무하는 모든 사원들의 last_name, 부서번호, 부서명, job_id 조회
SELECT
	e.LAST_NAME,
	e.DEPARTMENT_ID,
	d.DEPARTMENT_NAME,
	e.JOB_ID
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	e.DEPARTMENT_ID = d.DEPARTMENT_ID AND d.DEPARTMENT_NAME = 'Executive'
ORDER BY
	e.DEPARTMENT_ID;
-- 29. 각 사원별 소속부서에서 자신보다 늦게 고용되었으나 보다 많은 연봉을 받는 사원이 존재하는 모든 사원들의 이름 조회
-- 이름은 first_name, last_name을 연결하여 출력
SELECT DISTINCT
	e1.FIRST_NAME || ' ' || e1.LAST_NAME AS NAME
FROM
	EMPLOYEES e1
JOIN EMPLOYEES e2 ON
	e1.DEPARTMENT_ID = e2.DEPARTMENT_ID
WHERE
	e1.HIRE_DATE < e2.HIRE_DATE
	AND e1.SALARY < e2.SALARY
ORDER BY
	NAME;
-- 서브 쿼리
-- 30. job_id가 'SA_MAN'인 사원들의 최대 연봉보다 높게 받는 사원들의 LAST_NAME, JOB_ID, SALARY 조회
SELECT
	e.LAST_NAME,
	e.JOB_ID,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	e.SALARY > (
	SELECT
		MAX(e2.SALARY)
	FROM
		EMPLOYEES e2
	WHERE
		e2.JOB_ID = 'SA_MAN'); 
-- 31. 커미션을 받는 사원들의 부서와 연봉이 동일한 사원들의 LAST_NAME, 부서번호, 급여 조회
SELECT
	e.LAST_NAME,
	e.DEPARTMENT_ID,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	(e.DEPARTMENT_ID, e.SALARY) IN (
	SELECT
		e2.DEPARTMENT_ID,
		e2.SALARY
	FROM
		EMPLOYEES e2
	WHERE
		e2.COMMISSION_PCT IS NOT NULL); 
-- 32. 회사 전체 평균 연봉보다 더 버는 사원들 중 LAST_NAME 에 u가 들어있는 사원들이 근무하는 부서에서
-- 근무하는 사원들의 사번, LAST_NAME, SALARY 조회 (단, 평균연봉은 반올림한 후 비교)
SELECT
	e.EMPLOYEE_ID,
	e.LAST_NAME,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	e.DEPARTMENT_ID IN (
	SELECT
		DISTINCT
	e.DEPARTMENT_ID
	FROM
		EMPLOYEES e
	WHERE
		e.SALARY > (
		SELECT
			ROUND(AVG(e2.SALARY))
		FROM
			EMPLOYEES e2)
		AND e.LAST_NAME LIKE '%u%');

SELECT
	e.EMPLOYEE_ID,
	e.LAST_NAME,
	e.SALARY
FROM
	EMPLOYEES e,
	(
	SELECT
		DISTINCT
	e3.DEPARTMENT_ID
	FROM
		EMPLOYEES e3
	WHERE
		e3.SALARY > (
		SELECT
			ROUND(AVG(e2.SALARY))
		FROM
			EMPLOYEES e2)
		AND e3.LAST_NAME LIKE '%u%') dept
WHERE
	e.DEPARTMENT_ID = dept.DEPARTMENT_ID;
-- 33. 위치ID가 1700인 사원들의 급여, 커미션 추출 뒤 추출된 사원들의 급여와 커미션이 동일한 사원정보 출력
-- 사번, 이름(first+last), 부서번호, 급여
SELECT
	e.EMPLOYEE_ID,
	e.FIRST_NAME || ' ' || e.LAST_NAME AS NAME,
	e.DEPARTMENT_ID,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	(e.SALARY,
	NVL(e.COMMISSION_PCT, 0)) IN (
	SELECT		
		e2.SALARY,
		NVL(e2.COMMISSION_PCT, 0)
	FROM
		EMPLOYEES e2
	JOIN DEPARTMENTS d ON
		e2.DEPARTMENT_ID = d.DEPARTMENT_ID 
		AND d.LOCATION_ID = 1700	
	)
ORDER BY
	e.EMPLOYEE_ID;
-- 34. 총 사원 수 및 2011~14년도 별 고용된 사원들의 총 수 조회 (select 절에 사용하는 서브쿼리로 작성)
SELECT DISTINCT
(SELECT COUNT(*) FROM EMPLOYEES e) AS TOTAL,
(SELECT COUNT(*) FROM EMPLOYEES e GROUP BY TO_CHAR(e.HIRE_DATE, 'YYYY') HAVING TO_CHAR(e.HIRE_DATE, 'YYYY') = '2011') AS Y2011_COUNT,
(SELECT COUNT(*) FROM EMPLOYEES e WHERE TO_CHAR(e.HIRE_DATE, 'YYYY') = '2012') AS Y2012_COUNT,
(SELECT COUNT(*) FROM EMPLOYEES e WHERE TO_CHAR(e.HIRE_DATE, 'YYYY') = '2013') AS Y2013_COUNT,
(SELECT COUNT(*) FROM EMPLOYEES e WHERE TO_CHAR(e.HIRE_DATE, 'YYYY') = '2014') AS Y2014_COUNT
FROM DUAL;


SELECT DISTINCT
(SELECT COUNT(*) FROM EMPLOYEES e) AS TOTAL,
(SELECT COUNT(*) FROM EMPLOYEES e WHERE TO_CHAR(e.HIRE_DATE, 'YYYY') = '2011') AS Y2011_COUNT,
(SELECT COUNT(*) FROM EMPLOYEES e WHERE TO_CHAR(e.HIRE_DATE, 'YYYY') = '2012') AS Y2012_COUNT,
(SELECT COUNT(*) FROM EMPLOYEES e WHERE TO_CHAR(e.HIRE_DATE, 'YYYY') = '2013') AS Y2013_COUNT,
(SELECT COUNT(*) FROM EMPLOYEES e WHERE TO_CHAR(e.HIRE_DATE, 'YYYY') = '2014') AS Y2014_COUNT
FROM DUAL;